--- a/fs/smb/server/smb2pdu.c
+++ b/fs/smb/server/smb2pdu.c
@@ -2007,6 +2007,7 @@ int smb2_tree_connect(struct ksmbd_work
 			FILE_WRITE_DAC_LE | FILE_WRITE_OWNER_LE |
 			FILE_SYNCHRONIZE_LE;
 	} else {
+		conn->has_real_share = true;
 		rsp->ShareType = SMB2_SHARE_TYPE_DISK;
 		rsp->MaximalAccess = FILE_READ_DATA_LE | FILE_READ_EA_LE |
 			FILE_EXECUTE_LE | FILE_READ_ATTRIBUTES_LE;
--- a/fs/smb/server/transport_tcp.c
+++ b/fs/smb/server/transport_tcp.c
@@ -266,19 +266,31 @@ static int ksmbd_kthread_fn(void *p)
 			if (client_sk->sk->sk_family == AF_INET6) {
 				if (memcmp(&client_sk->sk->sk_v6_daddr,
 					   &conn->inet6_addr, 16) == 0) {
-					ret = -EAGAIN;
-					break;
+					if (conn->has_real_share) {
+						ksmbd_debug(CONN,
+							"Blocked duplicate stable IPv6 connection\n");
+						ret = -EAGAIN;
+						break;
+					}
 				}
 			} else if (inet_sk(client_sk->sk)->inet_daddr ==
 				 conn->inet_addr) {
-				ret = -EAGAIN;
-				break;
+				if (conn->has_real_share) {
+					ksmbd_debug(CONN,
+						"Blocked duplicate stable IPv4 connection\n");
+					ret = -EAGAIN;
+					break;
+				}
 			}
 #else
 			if (inet_sk(client_sk->sk)->inet_daddr ==
 			    conn->inet_addr) {
-				ret = -EAGAIN;
-				break;
+				if (conn->has_real_share) {
+					ksmbd_debug(CONN,
+						"Blocked duplicate stable IPv4 connection\n");
+					ret = -EAGAIN;
+					break;
+				}
 			}
 #endif
 		up_read(&conn_list_lock);
--- a/fs/smb/server/connection.h
+++ b/fs/smb/server/connection.h
@@ -45,6 +45,7 @@ struct ksmbd_conn {
 	unsigned int			max_cmds;
 	struct mutex			srv_mutex;
 	int				status;
+	bool				has_real_share;
 	unsigned int			cli_cap;
 	union {
 		__be32			inet_addr;
